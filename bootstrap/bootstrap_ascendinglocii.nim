# 2017/12/20
# William Whitacre
# Radix 7 Ascending Locii Computation
#
# 2017/12/26
# Removed redundant integer conversions.

import haas, system, sequtils, arraymancer, times

var skew_tensors: array[haas_dextent, Tensor[int]]

proc haas_skew_tensors*() =
  let
    Eye = to_tensor([[1.int, 0], [0.int, 1]])
    M = to_tensor([[3.int, -2], [2.int, 1]])
    unitt = to_tensor([1.int, 0])
    rottab = [
      to_tensor([[ 0.int,  0], [ 0.int,  0]]), # 0
      to_tensor([[ 1.int,  0], [ 0.int,  1]]), # 1
      to_tensor([[ 1.int, -1], [ 1.int,  0]]), # 2
      to_tensor([[ 0.int, -1], [ 1.int, -1]]), # 3
      to_tensor([[-1.int,  0], [ 0.int, -1]]), # 4
      to_tensor([[-1.int,  1], [-1.int,  0]]), # 5
      to_tensor([[ 0.int,  1], [-1.int,  1]])  # 6
      ]

  var
    m = clone(Eye)
    #r = zeros_like(unitt)

  for i in 0..haas_maxpow:
    skew_tensors[i] = new_tensor([7, 2], int)
    for j in 0..6:
      if j != 0:
        var r = rottab[j] * m * unitt
        skew_tensors[i][j, 0..1] = r.reshape([1, 2])
    m = m * M

haas_skew_tensors()

echo "# Autogenerated by bootstrap, detail/ag/locii.nim"
echo "# ", get_date_str(), "   ", get_clock_str()
echo ""

echo "const haas_locii* = ["
for i, x in pairs(skew_tensors):
  echo "  ["
  for j in 0..6:
    var seqst = $(toSeq(items(skew_tensors[i][j, 0..1])))
    seqst = seqst[1..^1]
    stdout.write "    "
    if j < 6: echo seqst, "," else: echo seqst
  stdout.write "  ]"
  echo(if i < haas_dextent - 1: "," else: "")
echo "]"
echo ""
